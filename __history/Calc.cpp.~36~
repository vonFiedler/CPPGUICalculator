//---------------------------------------------------------------------------

#include <vcl.h>
#include "Calc.h"
#include <stack>
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <string>
#include <vector>
#include <algorithm>
#include <exception>
#include <stdexcept>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
#pragma hdrstop
using namespace std;
TForm1 *Form1;
char lastChar = '0';
int pCount = 0;
bool fMode = false;
bool dMode = false;
bool d2Mode = true;
bool nMode = false;

string infix = "0";
 /*
string convertInfixToPostfix(string infix) {
	string postfix;
	stack<char> charStack;
    // loop thru array until there is no more data
	for (unsigned x = 0; x < infix.length(); ++x) {
        // place numbers (standard, decimal, & negative)
		// numbers onto the 'postfix' string
		if (isNumeric(infix[x])) {
            if (postfix.length() > 0 && !isNumeric(postfix.back())) {
                if (!std::isspace(postfix.back())) {
                    postfix += " ";
                }
            }
            postfix += infix[x];

        } else if (std::isspace(infix[x])) {
            continue;

        } else if (isMathOperator(infix[x])) {
            if (postfix.length() > 0 && !std::isspace(postfix.back())) {
                postfix += " ";
            }
            // use the 'orderOfOperations' function to check equality
            // of the math operator at the top of the stack compared to
            // the current math operator in the infix string
            while ((!charStack.empty()) &&
                (orderOfOperations(charStack.top()) >= orderOfOperations(infix[x]))) {
                // place the math operator from the top of the
                // stack onto the postfix string and continue the
                // process until complete
                if (postfix.length() > 0 && !std::isspace(postfix.back())) {
                    postfix += " ";
                }
                postfix += charStack.top();
                charStack.pop();
            }
            // push the remaining math operator onto the stack
            charStack.push(infix[x]);
		}
    }
}     */

bool isMathOperator(char token) {
// this function checks if operand is a math operator
    switch (std::tolower(token)) {
        case '+': case '-': case '*': case '/':
		case '^': case 'c': case 's': case 't':
		case 'o': case 'l': case 'n':
            return true;
            break;
        default:
            return false;
            break;
    }
}// end of isMathOperator

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------




void __fastcall TForm1::NumberClick(TObject *Sender)
{
	TButton* b = ((TButton*)Sender);
	if(nMode == true) {
		if(EditDisplay->Text == "0") {
			EditDisplay->Text = '-';
			infix = '~';
		}
		else {
			EditDisplay->Text = EditDisplay->Text + '-';
			infix = infix + '~';
		}
		nMode = false;
	}

	if(d2Mode == true) {
		dMode = true;
    }

	if(EditDisplay->Text == "0") {
		EditDisplay->Text = b->Caption;
		infix = char(EditDisplay->Text[1]);
	}
	else {
		EditDisplay->Text = EditDisplay->Text + b->Caption;
		infix = infix + char(EditDisplay->Text[EditDisplay->Text.Length()]);
	}
	lastChar = b->Caption[1];
	fMode = true;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::ParenClick1(TObject *Sender)
{
	if(fMode == false) {
    	TButton* b = ((TButton*)Sender);

		if(EditDisplay->Text == "0") {
			EditDisplay->Text = '(';
			infix = '(';
		}
		else {
			EditDisplay->Text = EditDisplay->Text + '(';
			infix = infix + '(';
		}
		lastChar = '(';
		pCount++;
		dMode = false;
		d2Mode = true;
    }

}
//---------------------------------------------------------------------------

void __fastcall TForm1::ParenClick2(TObject *Sender)
{
	if(lastChar != '(' && pCount > 0 && (fMode == true || lastChar == ')' )) {

		TButton* b = ((TButton*)Sender);

		EditDisplay->Text = EditDisplay->Text + ')';
		infix = infix + ')';

		lastChar = ')';
		pCount--;
		dMode = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::AddClick(TObject *Sender)
{
	if(fMode == true) {
		TButton* b = ((TButton*)Sender);
		EditDisplay->Text = EditDisplay->Text + '+';
		infix = infix + '+';
		lastChar = '+';
		fMode = false;
		dMode = false;
		d2Mode = true;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::SubClick(TObject *Sender)
{
	if(fMode == true) {
		TButton* b = ((TButton*)Sender);
		EditDisplay->Text = EditDisplay->Text + '-';
		infix = infix + '-';
		lastChar = '-';
		fMode = false;
		dMode = false;
		d2Mode = true;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::MulClick(TObject *Sender)
{
	if(fMode == true) {
		TButton* b = ((TButton*)Sender);
		EditDisplay->Text = EditDisplay->Text + '*';
		infix = infix + '*';
		lastChar = '*';
		fMode = false;
		dMode = false;
		d2Mode = true;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::DivClick(TObject *Sender)
{
	if(fMode == true) {
		TButton* b = ((TButton*)Sender);
		EditDisplay->Text = EditDisplay->Text + '/';
		infix = infix + '/';
		lastChar = '/';
		fMode = false;
		dMode = false;
		d2Mode = true;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::DotClick(TObject *Sender)
{
	if(dMode == true) {
		TButton* b = ((TButton*)Sender);
		EditDisplay->Text = EditDisplay->Text + '.';
		infix = infix + '.';
		lastChar = '.';
		dMode = false;
		d2Mode = false;
		fMode = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::NegClick(TObject *Sender)
{
	if(lastChar == '(' || lastChar == '+' || lastChar == '-' || lastChar == '*'
		|| lastChar == '/' || EditDisplay->Text == "0") {
		TButton* b = ((TButton*)Sender);
		if(nMode == false) {
			nMode = true;
		}
		else {
			nMode = false;
		}
	}

}
//---------------------------------------------------------------------------

void __fastcall TForm1::PowClick(TObject *Sender)
{
	if(fMode == true) {
		TButton* b = ((TButton*)Sender);
		EditDisplay->Text = EditDisplay->Text + "^(";
		infix = infix + "^(";
		pCount++;
		lastChar = '(';
		dMode = false;
		fMode = false;
    }
}
//---------------------------------------------------------------------------


void __fastcall TForm1::ClearClick(TObject *Sender)
{
	EditDisplay->Text = "0";
	infix = "0";
	lastChar = '0';
	fMode = false;
	dMode = false;
	d2Mode = true;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::SinClick(TObject *Sender)
{
	if(fMode == false) {
		if(EditDisplay->Text == "0") {
			EditDisplay->Text = "sin(";
			infix = "s(";
		}
		else {
			EditDisplay->Text = EditDisplay->Text + "sin(";
			infix = infix + "s(";
		}
		pCount++;
		lastChar = '(';
		dMode = false;
		fMode = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::CosClick(TObject *Sender)
{
	if(fMode == false) {
		if(EditDisplay->Text == "0") {
			EditDisplay->Text = "cos(";
			infix = "c(";
		}
		else {
			EditDisplay->Text = EditDisplay->Text + "cos(";
			infix = infix + "c(";
		}
		pCount++;
		lastChar = '(';
		dMode = false;
		fMode = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::TanClick(TObject *Sender)
{
	if(fMode == false) {
		if(EditDisplay->Text == "0") {
			EditDisplay->Text = "tan(";
			infix = "t(";
		}
		else {
			EditDisplay->Text = EditDisplay->Text + "tan(";
			infix = infix + "t(";
		}
		pCount++;
		lastChar = '(';
		dMode = false;
		fMode = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::CotClick(TObject *Sender)
{
	if(fMode == false) {
		if(EditDisplay->Text == "0") {
			EditDisplay->Text = "cot(";
			infix = "o(";
		}
		else {
			EditDisplay->Text = EditDisplay->Text + "cot(";
			infix = infix + "o(";
		}
		pCount++;
		lastChar = '(';
		dMode = false;
		fMode = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::LnClick(TObject *Sender)
{
	if(fMode == false) {
		if(EditDisplay->Text == "0") {
			EditDisplay->Text = "ln(";
			infix = "n(";
		}
		else {
			EditDisplay->Text = EditDisplay->Text + "ln(";
			infix = infix + "n(";
		}
		pCount++;
		lastChar = '(';
		dMode = false;
		fMode = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::LogClick(TObject *Sender)
{
	if(fMode == false) {
		if(EditDisplay->Text == "0") {
			EditDisplay->Text = "log(";
			infix = "l(";
		}
		else {
			EditDisplay->Text = EditDisplay->Text + "log(";
			infix = infix + "l(";
		}
		pCount++;
		lastChar = '(';
		dMode = false;
		fMode = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::BackClick(TObject *Sender)
{
	if(EditDisplay->Text.Length() == 1) {
		EditDisplay->Text = "0";
		infix = "0";
		lastChar = '0';
		fMode = false;
		dMode = false;
		d2Mode = true;
	}
	else {
		if(lastChar == '.') {
			dMode = true;
		}
		if(lastChar == '(') {
			pCount--;
		}
		if(lastChar == ')') {
            pCount++;
        }
		EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
		lastChar = EditDisplay->Text[EditDisplay->Text.Length()];
		if(lastChar == '+' || lastChar == '*' || lastChar == '/' || lastChar == '(') {
			fMode = false;
			dMode = false;
			d2Mode = true;
		}
		else if(lastChar == '-') {
			if(EditDisplay->Text.Length() == 1) {
				EditDisplay->Text = "0";
				infix = "0";
				lastChar = '0';
				fMode = false;
				dMode = false;
				d2Mode = true;
			}
			else {
				char nlChar = EditDisplay->Text[EditDisplay->Text.Length()-1];
				if(nlChar == '+' || nlChar == '*' || nlChar == '/' || nlChar == '(' ||
				   nlChar == '-') {
					EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
					infix.pop_back();
					lastChar = EditDisplay->Text[EditDisplay->Text.Length()];
					fMode = false;
					dMode = false;
					d2Mode = true;
				}
			}
		}
		else if(lastChar == '.') {
			fMode = false;
			dMode = false;
            d2Mode = false;
		}
		else if(lastChar == '^') {
			EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
			infix.pop_back();
			lastChar = EditDisplay->Text[EditDisplay->Text.Length()];
		}
		else if(lastChar == 's' || lastChar == 't' || lastChar == 'g') {
			if(EditDisplay->Text.Length() == 3) {
				EditDisplay->Text = "0";
				infix = "0";
				lastChar = '0';
				fMode = false;
				dMode = false;
				d2Mode = true;
			}
			else {
				EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
				EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
				EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
				infix.pop_back();
				infix.pop_back();
				infix.pop_back();
				lastChar = EditDisplay->Text[EditDisplay->Text.Length()];
				fMode = false;
				dMode = false;
				d2Mode = true;
			}
		}
		else if(lastChar == 'n') {
			char nlChar = EditDisplay->Text[EditDisplay->Text.Length()-1];
			if(nlChar == 'l') {
				if(EditDisplay->Text.Length() == 2) {
					EditDisplay->Text = "0";
					infix = "0";
					lastChar = '0';
					fMode = false;
					dMode = false;
					d2Mode = true;
				}
				else {
					EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
					EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
					infix.pop_back();
					infix.pop_back();
					lastChar = EditDisplay->Text[EditDisplay->Text.Length()];
					fMode = false;
					dMode = false;
					d2Mode = true;
				}
			}
			else {
					if(EditDisplay->Text.Length() == 3) {
					EditDisplay->Text = "0";
					infix = "0";
					lastChar = '0';
					fMode = false;
					dMode = false;
					d2Mode = true;
				}
				else {
					EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
					EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
					EditDisplay->Text = EditDisplay->Text.Delete(EditDisplay->Text.Length(),1);
					infix.pop_back();
					infix.pop_back();
                    infix.pop_back();
					lastChar = EditDisplay->Text[EditDisplay->Text.Length()];
					fMode = false;
					dMode = false;
					d2Mode = true;
				}
            }
		}
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::AnsClick(TObject *Sender)
{
	if(pCount > 0) {
		AnswerDisplay->Text = "Please Close Parenthesis";
		return;
	}
	if(lastChar == '+' || lastChar == '*' || lastChar == '/' || lastChar == '-') {
		AnswerDisplay->Text = "Please Finish Equation";
        return;
	}
	//wchar_t* infix0 = EditDisplay->Text.c_str();
	//wstring ws(infix0);
	//string str(ws.begin(), ws.end());
	//string postfix = convert(str);
	UnicodeString postfix = infix.c_str();
	AnswerDisplay->Text = postfix;
}
//---------------------------------------------------------------------------

